/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Agent {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "mode")]
    pub mode: Box<models::AgentMode>,
    #[serde(rename = "builtIn")]
    pub built_in: bool,
    #[serde(rename = "topP", skip_serializing_if = "Option::is_none")]
    pub top_p: Option<f64>,
    #[serde(rename = "temperature", skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f64>,
    #[serde(rename = "permission")]
    pub permission: Box<models::AgentPermission>,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<Box<models::SessionSummarizeRequest>>,
    #[serde(rename = "prompt", skip_serializing_if = "Option::is_none")]
    pub prompt: Option<String>,
    #[serde(rename = "tools")]
    pub tools: std::collections::HashMap<String, bool>,
    #[serde(rename = "options")]
    pub options: std::collections::HashMap<String, serde_json::Value>,
}

impl Agent {
    pub fn new(name: String, mode: models::AgentMode, built_in: bool, permission: models::AgentPermission, tools: std::collections::HashMap<String, bool>, options: std::collections::HashMap<String, serde_json::Value>) -> Agent {
        Agent {
            name,
            description: None,
            mode: Box::new(mode),
            built_in,
            top_p: None,
            temperature: None,
            permission: Box::new(permission),
            model: None,
            prompt: None,
            tools,
            options,
        }
    }
}

