/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppLogRequest {
    /// Service name for the log entry
    #[serde(rename = "service")]
    pub service: String,
    /// Log level
    #[serde(rename = "level")]
    pub level: Level,
    /// Log message
    #[serde(rename = "message")]
    pub message: String,
    /// Additional metadata for the log entry
    #[serde(rename = "extra", skip_serializing_if = "Option::is_none")]
    pub extra: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl AppLogRequest {
    pub fn new(service: String, level: Level, message: String) -> AppLogRequest {
        AppLogRequest {
            service,
            level,
            message,
            extra: None,
        }
    }
}
/// Log level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Level {
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "warn")]
    Warn,
}

impl Default for Level {
    fn default() -> Level {
        Self::Debug
    }
}

