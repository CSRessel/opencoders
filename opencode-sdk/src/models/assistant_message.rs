/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssistantMessage {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "sessionID")]
    pub session_id: String,
    #[serde(rename = "role")]
    pub role: String,
    #[serde(rename = "time")]
    pub time: Box<models::AssistantMessageTime>,
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<Box<models::AssistantMessageError>>,
    #[serde(rename = "system")]
    pub system: Vec<String>,
    #[serde(rename = "modelID")]
    pub model_id: String,
    #[serde(rename = "providerID")]
    pub provider_id: String,
    #[serde(rename = "path")]
    pub path: Box<models::AssistantMessagePath>,
    #[serde(rename = "summary", skip_serializing_if = "Option::is_none")]
    pub summary: Option<bool>,
    #[serde(rename = "cost")]
    pub cost: f64,
    #[serde(rename = "tokens")]
    pub tokens: Box<models::AssistantMessageTokens>,
}

impl AssistantMessage {
    pub fn new(id: String, session_id: String, role: String, time: models::AssistantMessageTime, system: Vec<String>, model_id: String, provider_id: String, path: models::AssistantMessagePath, cost: f64, tokens: models::AssistantMessageTokens) -> AssistantMessage {
        AssistantMessage {
            id,
            session_id,
            role,
            time: Box::new(time),
            error: None,
            system,
            model_id,
            provider_id,
            path: Box::new(path),
            summary: None,
            cost,
            tokens: Box::new(tokens),
        }
    }
}

