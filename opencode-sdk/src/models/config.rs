/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Config {
    /// JSON schema reference for configuration validation
    #[serde(rename = "$schema", skip_serializing_if = "Option::is_none")]
    pub dollar_schema: Option<String>,
    /// Theme name to use for the interface
    #[serde(rename = "theme", skip_serializing_if = "Option::is_none")]
    pub theme: Option<String>,
    /// Custom keybind configurations
    #[serde(rename = "keybinds", skip_serializing_if = "Option::is_none")]
    pub keybinds: Option<models::KeybindsConfig>,
    #[serde(rename = "tui", skip_serializing_if = "Option::is_none")]
    pub tui: Option<Box<models::ConfigTui>>,
    #[serde(rename = "plugin", skip_serializing_if = "Option::is_none")]
    pub plugin: Option<Vec<String>>,
    #[serde(rename = "snapshot", skip_serializing_if = "Option::is_none")]
    pub snapshot: Option<bool>,
    /// Control sharing behavior:'manual' allows manual sharing via commands, 'auto' enables automatic sharing, 'disabled' disables all sharing
    #[serde(rename = "share", skip_serializing_if = "Option::is_none")]
    pub share: Option<Share>,
    /// @deprecated Use 'share' field instead. Share newly created sessions automatically
    #[serde(rename = "autoshare", skip_serializing_if = "Option::is_none")]
    pub autoshare: Option<bool>,
    /// Automatically update to the latest version
    #[serde(rename = "autoupdate", skip_serializing_if = "Option::is_none")]
    pub autoupdate: Option<bool>,
    /// Disable providers that are loaded automatically
    #[serde(rename = "disabled_providers", skip_serializing_if = "Option::is_none")]
    pub disabled_providers: Option<Vec<String>>,
    /// Model to use in the format of provider/model, eg anthropic/claude-2
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// Small model to use for tasks like title generation in the format of provider/model
    #[serde(rename = "small_model", skip_serializing_if = "Option::is_none")]
    pub small_model: Option<String>,
    /// Custom username to display in conversations instead of system username
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<models::ConfigMode>,
    #[serde(rename = "agent", skip_serializing_if = "Option::is_none")]
    pub agent: Option<models::ConfigAgent>,
    /// Custom provider configurations and model overrides
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<std::collections::HashMap<String, models::ConfigProviderValue>>,
    /// MCP (Model Context Protocol) server configurations
    #[serde(rename = "mcp", skip_serializing_if = "Option::is_none")]
    pub mcp: Option<std::collections::HashMap<String, models::ConfigMcpValue>>,
    #[serde(rename = "formatter", skip_serializing_if = "Option::is_none")]
    pub formatter: Option<std::collections::HashMap<String, models::ConfigFormatterValue>>,
    #[serde(rename = "lsp", skip_serializing_if = "Option::is_none")]
    pub lsp: Option<std::collections::HashMap<String, models::ConfigLspValue>>,
    /// Additional instruction files or patterns to include
    #[serde(rename = "instructions", skip_serializing_if = "Option::is_none")]
    pub instructions: Option<Vec<String>>,
    /// @deprecated Always uses stretch layout.
    #[serde(rename = "layout", skip_serializing_if = "Option::is_none")]
    pub layout: Option<models::LayoutConfig>,
    #[serde(rename = "permission", skip_serializing_if = "Option::is_none")]
    pub permission: Option<Box<models::ConfigPermission>>,
    #[serde(rename = "tools", skip_serializing_if = "Option::is_none")]
    pub tools: Option<std::collections::HashMap<String, bool>>,
    #[serde(rename = "experimental", skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Box<models::ConfigExperimental>>,
}

impl Config {
    pub fn new() -> Config {
        Config {
            dollar_schema: None,
            theme: None,
            keybinds: None,
            tui: None,
            plugin: None,
            snapshot: None,
            share: None,
            autoshare: None,
            autoupdate: None,
            disabled_providers: None,
            model: None,
            small_model: None,
            username: None,
            mode: None,
            agent: None,
            provider: None,
            mcp: None,
            formatter: None,
            lsp: None,
            instructions: None,
            layout: None,
            permission: None,
            tools: None,
            experimental: None,
        }
    }
}
/// Control sharing behavior:'manual' allows manual sharing via commands, 'auto' enables automatic sharing, 'disabled' disables all sharing
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Share {
    #[serde(rename = "manual")]
    Manual,
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Share {
    fn default() -> Share {
        Self::Manual
    }
}

