/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigProviderValueModelsValue {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "release_date", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<String>,
    #[serde(rename = "attachment", skip_serializing_if = "Option::is_none")]
    pub attachment: Option<bool>,
    #[serde(rename = "reasoning", skip_serializing_if = "Option::is_none")]
    pub reasoning: Option<bool>,
    #[serde(rename = "temperature", skip_serializing_if = "Option::is_none")]
    pub temperature: Option<bool>,
    #[serde(rename = "tool_call", skip_serializing_if = "Option::is_none")]
    pub tool_call: Option<bool>,
    #[serde(rename = "cost", skip_serializing_if = "Option::is_none")]
    pub cost: Option<Box<models::ConfigProviderValueModelsValueCost>>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<Box<models::ConfigProviderValueModelsValueLimit>>,
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl ConfigProviderValueModelsValue {
    pub fn new() -> ConfigProviderValueModelsValue {
        ConfigProviderValueModelsValue {
            id: None,
            name: None,
            release_date: None,
            attachment: None,
            reasoning: None,
            temperature: None,
            tool_call: None,
            cost: None,
            limit: None,
            options: None,
        }
    }
}

