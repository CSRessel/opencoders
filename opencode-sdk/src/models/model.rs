/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Model {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "release_date")]
    pub release_date: String,
    #[serde(rename = "attachment")]
    pub attachment: bool,
    #[serde(rename = "reasoning")]
    pub reasoning: bool,
    #[serde(rename = "temperature")]
    pub temperature: bool,
    #[serde(rename = "tool_call")]
    pub tool_call: bool,
    #[serde(rename = "cost")]
    pub cost: Box<models::ModelCost>,
    #[serde(rename = "limit")]
    pub limit: Box<models::ModelLimit>,
    #[serde(rename = "options")]
    pub options: std::collections::HashMap<String, serde_json::Value>,
}

impl Model {
    pub fn new(id: String, name: String, release_date: String, attachment: bool, reasoning: bool, temperature: bool, tool_call: bool, cost: models::ModelCost, limit: models::ModelLimit, options: std::collections::HashMap<String, serde_json::Value>) -> Model {
        Model {
            id,
            name,
            release_date,
            attachment,
            reasoning,
            temperature,
            tool_call,
            cost: Box::new(cost),
            limit: Box::new(limit),
            options,
        }
    }
}

