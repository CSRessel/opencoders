/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Permission {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "pattern", skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    #[serde(rename = "sessionID")]
    pub session_id: String,
    #[serde(rename = "messageID")]
    pub message_id: String,
    #[serde(rename = "callID", skip_serializing_if = "Option::is_none")]
    pub call_id: Option<String>,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "metadata")]
    pub metadata: std::collections::HashMap<String, serde_json::Value>,
    #[serde(rename = "time")]
    pub time: Box<models::UserMessageTime>,
}

impl Permission {
    pub fn new(id: String, r#type: String, session_id: String, message_id: String, title: String, metadata: std::collections::HashMap<String, serde_json::Value>, time: models::UserMessageTime) -> Permission {
        Permission {
            id,
            r#type,
            pattern: None,
            session_id,
            message_id,
            call_id: None,
            title,
            metadata,
            time: Box::new(time),
        }
    }
}

