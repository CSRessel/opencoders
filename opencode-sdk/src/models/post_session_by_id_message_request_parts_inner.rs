/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostSessionByIdMessageRequestPartsInner {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "sessionID")]
    pub session_id: String,
    #[serde(rename = "messageID")]
    pub message_id: String,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "mime")]
    pub mime: String,
    #[serde(rename = "filename", skip_serializing_if = "Option::is_none")]
    pub filename: Option<String>,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "synthetic", skip_serializing_if = "Option::is_none")]
    pub synthetic: Option<bool>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<Box<models::TextPartTime>>,
}

impl PostSessionByIdMessageRequestPartsInner {
    pub fn new(id: String, session_id: String, message_id: String, r#type: String, mime: String, url: String, text: String) -> PostSessionByIdMessageRequestPartsInner {
        PostSessionByIdMessageRequestPartsInner {
            id,
            session_id,
            message_id,
            r#type,
            mime,
            filename: None,
            url,
            text,
            synthetic: None,
            time: None,
        }
    }
}

