/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReasoningPart {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "sessionID")]
    pub session_id: String,
    #[serde(rename = "messageID")]
    pub message_id: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "time")]
    pub time: Box<models::TextPartTime>,
}

impl ReasoningPart {
    pub fn new(id: String, session_id: String, message_id: String, r#type: Type, text: String, time: models::TextPartTime) -> ReasoningPart {
        ReasoningPart {
            id,
            session_id,
            message_id,
            r#type,
            text,
            metadata: None,
            time: Box::new(time),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "reasoning")]
    Reasoning,
}

impl Default for Type {
    fn default() -> Type {
        Self::Reasoning
    }
}

