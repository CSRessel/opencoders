/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SymbolSource {
    #[serde(rename = "text")]
    pub text: Box<models::FilePartSourceText>,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "range")]
    pub range: Box<models::Range>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "kind")]
    pub kind: i32,
}

impl SymbolSource {
    pub fn new(text: models::FilePartSourceText, r#type: Type, path: String, range: models::Range, name: String, kind: i32) -> SymbolSource {
        SymbolSource {
            text: Box::new(text),
            r#type,
            path,
            range: Box::new(range),
            name,
            kind,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "symbol")]
    Symbol,
}

impl Default for Type {
    fn default() -> Type {
        Self::Symbol
    }
}

