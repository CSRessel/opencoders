/*
 * opencode
 *
 * opencode api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigProviderValue {
    #[serde(rename = "api", skip_serializing_if = "Option::is_none")]
    pub api: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "env", skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<String>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "npm", skip_serializing_if = "Option::is_none")]
    pub npm: Option<String>,
    #[serde(rename = "models")]
    pub models: std::collections::HashMap<String, models::ConfigProviderValueModelsValue>,
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl ConfigProviderValue {
    pub fn new(models: std::collections::HashMap<String, models::ConfigProviderValueModelsValue>) -> ConfigProviderValue {
        ConfigProviderValue {
            api: None,
            name: None,
            env: None,
            id: None,
            npm: None,
            models,
            options: None,
        }
    }
}

